[
  {
    "strategy": "zero-shot",
    "promptPrefix": "Give me a MySQL select statement that answers the question about data following the schema. Only respond with MySQL syntax. If there is an error do not expalin it!\nCREATE TABLE Artist\n(\n  id    INT          NOT NULL,\n  name  VARCHAR(100) NOT NULL,\n  genre VARCHAR(100) NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE Concert\n(\n  id        INT      NOT NULL,\n  date      DATETIME NOT NULL,\n  artist_id INT      NOT NULL,\n  venue_id  INT      NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE ConcertStaff\n(\n  concert_id INT NOT NULL,\n  staff_id   INT NOT NULL\n);\n\nCREATE TABLE Sale\n(\n  id           INT          NOT NULL,\n  ticket_qty   INT          NOT NULL,\n  ticket_price DECIMAL(6,2) NOT NULL,\n  concert_id   INT          NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE Song\n(\n  id        INT          NOT NULL,\n  title     VARCHAR(100) NOT NULL,\n  length    TIME         NOT NULL,\n  artist_id INT          NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE Staff\n(\n  id          INT                                                                                   NOT NULL,\n  name        VARCHAR(100)                                                                          NOT NULL,\n  role        ENUM('Light Tech', 'Audio Engineer','Instrument Tech','Security','Venue Merchandise') NOT NULL,\n  hourly_rate DECIMAL                                                                               NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE Venue\n(\n  id       INT          NOT NULL,\n  name     VARCHAR(100) NOT NULL,\n  capacity INT          NOT NULL,\n  city     VARCHAR(100) NOT NULL,\n  PRIMARY KEY (id)\n);\n\nALTER TABLE Song\n  ADD CONSTRAINT FK_Artist_TO_Song\n    FOREIGN KEY (artist_id)\n    REFERENCES Artist (id);\n\nALTER TABLE Concert\n  ADD CONSTRAINT FK_Artist_TO_Concert\n    FOREIGN KEY (artist_id)\n    REFERENCES Artist (id);\n\nALTER TABLE Concert\n  ADD CONSTRAINT FK_Venue_TO_Concert\n    FOREIGN KEY (venue_id)\n    REFERENCES Venue (id);\n\nALTER TABLE Sale\n  ADD CONSTRAINT FK_Concert_TO_Sale\n    FOREIGN KEY (concert_id)\n    REFERENCES Concert (id);\n\nALTER TABLE ConcertStaff\n  ADD CONSTRAINT FK_Concert_TO_ConcertStaff\n    FOREIGN KEY (concert_id)\n    REFERENCES Concert (id);\n\nALTER TABLE ConcertStaff\n  ADD CONSTRAINT FK_Staff_TO_ConcertStaff\n    FOREIGN KEY (staff_id)\n    REFERENCES Staff (id);\n",
    "questions": [
      {
        "strategy": "zero-shot",
        "question": "Where are there Metallica concerts?",
        "rawSQL": "SELECT Venue.name, Venue.city\nFROM Venue\nJOIN Concert ON Venue.id = Concert.venue_id\nJOIN Artist ON Concert.artist_id = Artist.id\nWHERE Artist.name = 'Metallica';",
        "sqlResult": "[]",
        "friendlyResponse": "I'm here to help, but it seems there was a misunderstanding with your question. Could you provide more details?"
      },
      {
        "strategy": "zero-shot",
        "question": "How many staff members will be working at a concert in the month of May 2024?",
        "rawSQL": "SELECT COUNT(DISTINCT cs.staff_id) AS total_staff_working\nFROM ConcertStaff cs\nJOIN Concert c ON cs.concert_id = c.id\nWHERE c.date BETWEEN '2024-05-01' AND '2024-05-31';",
        "sqlResult": "[\n  {\n    \"total_staff_working\": 0\n  }\n]",
        "friendlyResponse": "No staff members are working."
      },
      {
        "strategy": "zero-shot",
        "question": "How many concerts are there in 2024?",
        "rawSQL": "SELECT COUNT(*) FROM Concert WHERE YEAR(date) = 2024;",
        "sqlResult": "[\n  {\n    \"COUNT(*)\": 2\n  }\n]",
        "friendlyResponse": "There are 2 results."
      },
      {
        "strategy": "zero-shot",
        "question": "What is the total number of tickets sold for all concerts in 2024?",
        "rawSQL": "SELECT SUM(ticket_qty) as total_tickets_sold\nFROM Sale\nJOIN Concert ON Sale.concert_id = Concert.id\nWHERE YEAR(Concert.date) = 2024;",
        "sqlResult": "[\n  {\n    \"total_tickets_sold\": \"75\"\n  }\n]",
        "friendlyResponse": "75 tickets were sold."
      },
      {
        "strategy": "zero-shot",
        "question": "Which artist generated the most all-time revenue?",
        "rawSQL": "SELECT a.name, SUM(s.ticket_qty * s.ticket_price) AS total_revenue\nFROM Artist a\nJOIN Concert c ON a.id = c.artist_id\nJOIN Sale s ON c.id = s.concert_id\nGROUP BY a.id\nORDER BY total_revenue DESC\nLIMIT 1;",
        "sqlResult": "[\n  {\n    \"name\": \"Adele\",\n    \"total_revenue\": \"39000.00\"\n  }\n]",
        "friendlyResponse": "Adele made a total revenue of $39,000."
      },
      {
        "strategy": "zero-shot",
        "question": "What is the total revenue generated by all concerts in 2024?",
        "rawSQL": "SELECT SUM(ticket_qty * ticket_price) AS total_revenue\nFROM Sale\nJOIN Concert ON Sale.concert_id = Concert.id\nWHERE YEAR(Concert.date) = 2024;",
        "sqlResult": "[\n  {\n    \"total_revenue\": \"8250.00\"\n  }\n]",
        "friendlyResponse": "The total revenue is $8,250.00."
      },
      {
        "strategy": "zero-shot",
        "question": "What is the average number of songs played at a concert?",
        "rawSQL": "SELECT AVG(song_count) FROM (\n  SELECT c.id, COUNT(s.id) AS song_count\n  FROM Concert c\n  JOIN Artist a ON c.artist_id = a.id\n  JOIN Song s ON a.id = s.artist_id\n  GROUP BY c.id\n) AS concert_song_counts;",
        "sqlResult": "[\n  {\n    \"AVG(song_count)\": \"4.0000\"\n  }\n]",
        "friendlyResponse": "The average song count is 4."
      }
    ]
  },
  {
    "strategy": "single-domain",
    "promptPrefix": "CREATE TABLE Artist\n(\n  id    INT          NOT NULL,\n  name  VARCHAR(100) NOT NULL,\n  genre VARCHAR(100) NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE Concert\n(\n  id        INT      NOT NULL,\n  date      DATETIME NOT NULL,\n  artist_id INT      NOT NULL,\n  venue_id  INT      NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE ConcertStaff\n(\n  concert_id INT NOT NULL,\n  staff_id   INT NOT NULL\n);\n\nCREATE TABLE Sale\n(\n  id           INT          NOT NULL,\n  ticket_qty   INT          NOT NULL,\n  ticket_price DECIMAL(6,2) NOT NULL,\n  concert_id   INT          NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE Song\n(\n  id        INT          NOT NULL,\n  title     VARCHAR(100) NOT NULL,\n  length    TIME         NOT NULL,\n  artist_id INT          NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE Staff\n(\n  id          INT                                                                                   NOT NULL,\n  name        VARCHAR(100)                                                                          NOT NULL,\n  role        ENUM('Light Tech', 'Audio Engineer','Instrument Tech','Security','Venue Merchandise') NOT NULL,\n  hourly_rate DECIMAL                                                                               NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE Venue\n(\n  id       INT          NOT NULL,\n  name     VARCHAR(100) NOT NULL,\n  capacity INT          NOT NULL,\n  city     VARCHAR(100) NOT NULL,\n  PRIMARY KEY (id)\n);\n\nALTER TABLE Song\n  ADD CONSTRAINT FK_Artist_TO_Song\n    FOREIGN KEY (artist_id)\n    REFERENCES Artist (id);\n\nALTER TABLE Concert\n  ADD CONSTRAINT FK_Artist_TO_Concert\n    FOREIGN KEY (artist_id)\n    REFERENCES Artist (id);\n\nALTER TABLE Concert\n  ADD CONSTRAINT FK_Venue_TO_Concert\n    FOREIGN KEY (venue_id)\n    REFERENCES Venue (id);\n\nALTER TABLE Sale\n  ADD CONSTRAINT FK_Concert_TO_Sale\n    FOREIGN KEY (concert_id)\n    REFERENCES Concert (id);\n\nALTER TABLE ConcertStaff\n  ADD CONSTRAINT FK_Concert_TO_ConcertStaff\n    FOREIGN KEY (concert_id)\n    REFERENCES Concert (id);\n\nALTER TABLE ConcertStaff\n  ADD CONSTRAINT FK_Staff_TO_ConcertStaff\n    FOREIGN KEY (staff_id)\n    REFERENCES Staff (id);\n\nWhere are there Harry Styles concerts?\nSELECT venue.name, venue.city FROM Venue\nINNER JOIN Concert ON venue.id = concert.venue_id\nINNER JOIN Artist ON concert.artist_id = artist.id\nWHERE artist.name = 'Harry Styles';\n\nHow many staff members will be working at a concert on 2024-12-25?\nSELECT COUNT(*) FROM Staff\nINNER JOIN Concert ON staff.concert_id = concert.id\nWHERE concert.date = '2024-12-25';\n\nGive me a MySQL select statement that answers the question about data following the schema. Only respond with MySQL syntax. If there is an error do not expalin it!\n",
    "questions": [
      {
        "strategy": "single-domain",
        "question": "Where are there Metallica concerts?",
        "rawSQL": "SELECT venue.name, venue.city FROM Venue\nINNER JOIN Concert ON venue.id = concert.venue_id\nINNER JOIN Artist ON concert.artist_id = artist.id\nWHERE artist.name = 'Metallica';",
        "sqlResult": "Unknown column 'venue.name' in 'field list'",
        "friendlyResponse": "Error: Could not run query."
      },
      {
        "strategy": "single-domain",
        "question": "How many staff members will be working at a concert in the month of May 2024?",
        "rawSQL": "SELECT COUNT(DISTINCT ConcertStaff.staff_id) AS 'Number of Staff Members' \nFROM ConcertStaff\nINNER JOIN Concert ON ConcertStaff.concert_id = Concert.id\nWHERE YEAR(Concert.date) = 2024 AND MONTH(Concert.date) = 5;",
        "sqlResult": "[\n  {\n    \"Number of Staff Members\": 0\n  }\n]",
        "friendlyResponse": "There are 0 staff members."
      },
      {
        "strategy": "single-domain",
        "question": "How many concerts are there in 2024?",
        "rawSQL": "SELECT COUNT(*) FROM Concert\nWHERE YEAR(date) = 2024;",
        "sqlResult": "[\n  {\n    \"COUNT(*)\": 2\n  }\n]",
        "friendlyResponse": "The count is 2."
      },
      {
        "strategy": "single-domain",
        "question": "What is the total number of tickets sold for all concerts in 2024?",
        "rawSQL": "SELECT SUM(sale.ticket_qty) AS total_tickets_sold\nFROM Sale\nINNER JOIN Concert ON sale.concert_id = concert.id\nWHERE YEAR(concert.date) = 2024;",
        "sqlResult": "Unknown column 'sale.ticket_qty' in 'field list'",
        "friendlyResponse": "Error: Could not run query."
      },
      {
        "strategy": "single-domain",
        "question": "Which artist generated the most all-time revenue?",
        "rawSQL": "SELECT Artist.name, SUM(Sale.ticket_qty * Sale.ticket_price) AS total_revenue\nFROM Artist\nINNER JOIN Concert ON Artist.id = Concert.artist_id\nINNER JOIN Sale ON Concert.id = Sale.concert_id\nGROUP BY Artist.id\nORDER BY total_revenue DESC\nLIMIT 1;",
        "sqlResult": "[\n  {\n    \"name\": \"Adele\",\n    \"total_revenue\": \"39000.00\"\n  }\n]",
        "friendlyResponse": "Sure, Adele has a total revenue of $39,000."
      },
      {
        "strategy": "single-domain",
        "question": "What is the total revenue generated by all concerts in 2024?",
        "rawSQL": "SELECT SUM(ticket_qty * ticket_price) AS total_revenue FROM Sale\nINNER JOIN Concert ON Sale.concert_id = Concert.id\nWHERE YEAR(Concert.date) = 2024;",
        "sqlResult": "[\n  {\n    \"total_revenue\": \"8250.00\"\n  }\n]",
        "friendlyResponse": "The total revenue is $8,250.00."
      },
      {
        "strategy": "single-domain",
        "question": "What is the average number of songs played at a concert?",
        "rawSQL": "SELECT AVG(song_count) AS avg_songs_played FROM (\n  SELECT concert.id, COUNT(song.id) AS song_count\n  FROM Concert\n  INNER JOIN Artist ON Concert.artist_id = Artist.id\n  INNER JOIN Song ON Artist.id = Song.artist_id\n  GROUP BY concert.id\n) AS concert_song_count;",
        "sqlResult": "Unknown column 'concert.id' in 'field list'",
        "friendlyResponse": "Error: Could not run query."
      }
    ]
  }
]